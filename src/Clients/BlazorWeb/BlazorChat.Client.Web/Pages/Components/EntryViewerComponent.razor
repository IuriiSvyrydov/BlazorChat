@using BlazorChat.Client.Web.Infrastructure.Models
@using BlazorChat.Common.Models
@if (Entry != null)
{
    <div class="card border-0">
        <div class="card-body">
            <h5 class="card-title"><a href="/entry/@Entry.Id"><strong class="entry-subject">@Entry.Subject</strong></a></h5>
            <br/>
            <p class="entry-content">@Entry.Content</p>
            @if (MyEntries)
            {
                <EntryFooterFavoriteComponent EntryId="Entry.Id"
                                              OnFavClicked="@OnFavClicked"
                                              FavoritedCount="@Entry.FavoritedCount"
                                              IsFavorited="@Entry.IsFavorited"/>
            }
            else
            {
                <EntryFooterRateComponent EntryId="@Entry.Id"
                                          OnFaveClicked="@OnFavClicked"
                                          OnVoteClicked="@OnVoteClicked"
                                          FavoritedCount="@Entry.FavoritedCount"
                                          IsFavorited="@Entry.IsFavorited"
                                          />
            }
            <EntryFooterAuthorComponent UserName="@Entry.CreatedByUserName"
                                        CreateDate="@Entry.CreatedDate"/>
        </div>
    </div>
}
@code {
    [Parameter]
    public GetEntryDetailViewModel Entry { get; set; }
    [Parameter]
    public bool MyEntries { get; set; }
    [Inject]IVoteService VoteService { get; set; }
    [Inject]IFavService FavService { get; set; }

    private async Task OnFavClicked(FavClickedEventArgs args)
    {
        if (args.IsFaved)
        {
            await FavService.CreateEntryFav(args.EntryId);
            Entry.IsFavorited = true;
            Entry.FavoritedCount++;
        }
        else
        {
            await FavService.DeleteEntryFav(args.EntryId);
            Entry.IsFavorited = false;
            Entry.FavoritedCount--;    
        }
        StateHasChanged();
    }

    public async Task OnVoteClicked(VoteClickedEventArgs args)
    {
        if (args.UpVoteDeleted || args.DownVoteDeleted)
        {
            await VoteService.DeleteEntryVote(args.EntryId);
            Entry.VoteType = VoteType.None;
            return;
            
        }
        if (args.IsUpVoteClicked)
        {
            await VoteService.CreateEntryVote(args.EntryId,VoteType.UpVote);
            Entry.VoteType = VoteType.UpVote;
            return;
        }
        else if (args.IsDownVoteClicked)
        {
            await VoteService.CreateEntryVote(args.EntryId, VoteType.DownVote);
            Entry.VoteType = VoteType.DownVote;
            return;
            
        }
       

    }
}
